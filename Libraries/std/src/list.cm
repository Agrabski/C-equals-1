import {null} from {cm1mLang}

public class list<T> //: ICollection<T>
{
	private _begin: @unique<listElement<T>>;
	private _end:  listElement<T>*;

	public fn push(element: T*)
	{
		let newElement = new unique listElement<T>();
		newElement._allocated = element;
		if (self._begin.get() == null<listElement<T>>())
			self._begin = newElement.move();
		else
		{
			let currElement = self._begin.get();
			while(currElement._next.get() != null<T>())
				currElement = currElement._next.get();
			currElement._next = newElement.move();
		}
	}

	public fn get(index: usize) -> T*
	{
	
		let currElement = self._begin.get();
		while(currElement._next.get() != null<T>() && index > 0)
		{
			currElement = currElement._next.get();
			index = index - 1;
		}
		return currElement._allocated;
	}

	public fn length() -> usize
	{
		let result = 0;
		let currElement = self._begin.get();
		while(currElement._next.get() != null<T>() )
		{
			currElement = currElement._next.get();
			result = result + 1;
		}
		return result;
	}
}

private class listElement<T>
{
	public _allocated: T;
	public _next: @unique<listElement<T>>;
}
