import {usize compiletime_heap_allocate null char} from {cm1mLang}
import {RunTimeOnly mapToExternalSymbol} from {compiler}

[RunTimeOnly()]
public fn new_array<typename T>(size: usize) -> T[]
{
	return array_cast<T>(unsafe_new(sizeof<T>() * size), size);
	
}

[RunTimeOnly()]
public fn operator new unique<typename T>() -> @unique<T>
{
	let result = unsafe_cast<char[], T>(unsafe_new(sizeof<T>()));
	return @unique<T>(result);
}

public fn operator new unique<typename T>() -> @unique<T> 
{
	let result = compiletime_heap_allocate<T>();
	return @unique<T>(result);
}

[mapToExternalSymbol("malloc", "")]
private fn unsafe_new(size: usize) -> char*
{}

[mapToExternalSymbol("free", "")]
internal fn delete<typename T>(val: T*)
{}
