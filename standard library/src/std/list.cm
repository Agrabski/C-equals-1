namespace std
{
	public class list<T> : ICollection<T>
	{
		private unique<listElement<T>> _begin;
		private listElement<T>& _end;

		public fn push(element: T&)
		{
			let newElement = new<listElement<T>>();
			newElement._allocated = element;
			if (_begin == null)
				_begin = newElement.move();
			else
			{
				let currElement = _begin.get();
				while(currElement._next.get() != null)
					currElement = currElement._next.get()
				currElement._next = newElement.move();
			}
		}

		public fn get(index: usize) -> T&
		{
		
			let currElement = _begin.get();
			while(currElement._next.get() != null && index > 0)
			{
				currElement = currElement._next.get()
				index = index - 1;
			}
			return currElement._allocated;
		}

		public fn length() -> usize
		{
			let result = 0;
			let currElement = _begin.get();
			while(currElement._next.get() != null )
			{
				currElement = currElement._next.get()
				result = result + 1;
			}
			return result;
		}
	}

	private class listElement<T>
	{
		public T _allocated;
		public unique<listElement<T>> _next;
	}
}