import {compilerEntryPoint usize bool packageDescriptor string null array} from {cm1mLang}
import {llvmModule compilationResult llvmType llvmInt32Type llvmCstringType llvmFunction llvmBoolType} from {cm1mLang::compiler::backend}
import {functionDescriptor typeDescriptor packageDescriptor} from {cm1mLang::compiler}
import {enumerate list print dictionary} from {std}

private struct pathPackagePair
{
	public path: string;
	public module: llvmModule;
	public fn construct(p: string, m:llvmModule)
	{
		self.path = p;
		self.module = m;
	}
}

private struct typeMapPair
{
	public ctype: typeDescriptor;
	public llvmType: llvmType;

	public fn construct(t: typeDescriptor, lt: llvmType)
	{
		self.ctype = t;
		self.llvmType = lt;
	}
}

private class packageRegistry
{
	private _data: list<pathPackagePair>;
	private _types: list<typeMapPair>;
	public _functions: dictionary<functionDescriptor, llvmFunction>;
	private _compilationResult: compilationResult;

	public fn construct(cr: compilationResult)
	{
		self._data = list<pathPackagePair>();
		self._types = list<typeMapPair>();
		self._compilationResult = cr;
		self._functions = dictionary<functionDescriptor, llvmFunction>();
	}

	private fn getModuleForFile(path: string) -> llvmModule
	{
		for(i in enumerate(0, self._data.length()))
			if(self._data.get(i).path == path)
				return self._data.get(i).module;
		let newModule = self._compilationResult.appendModule(path);
		let pair = pathPackagePair(path, newModule);
		self._data.push(pair);
		return newModule;
	}

	public fn findExistingType(t: typeDescriptor) -> llvmType*
	{
		if(t.isVoidType() && (t.referenceCount() > 0))
		{
			print("void pointer");
			return &self.getModuleForFile("void").getPointer(llvmInt32Type(self._compilationResult));
		}
		for(i in enumerate(0, self._types.length()))
			if(self._types.get(i).ctype == t)
				return &(self._types.get(i).llvmType);
		return null<llvmType>();

	}

	public fn getModuleFor(f: functionDescriptor) -> llvmModule
	{
		let file = f.sourceLocation();
		return self.getModuleForFile(file.filename);
	}

	public fn getLLVMTypeFor(t: typeDescriptor) -> llvmType
	{
		if(t == typeof(usize))
			return llvmInt32Type(self._compilationResult);
		if(t == typeof(string))
			return llvmCstringType(self._compilationResult);
		if(t == typeof(bool))
			return llvmBoolType(self._compilationResult);
		if(t.isVoidType() && (t.referenceCount() > 0))
		{
			print("void pointer");
			return self.getModuleForFile("void").getPointer(llvmInt32Type(self._compilationResult));
		}
		let file = t.sourceLocation();
		let module = self.getModuleForFile(file.filename);
		for(i in enumerate(0, self._types.length()))
			if(self._types.get(i).ctype == t)
				return self._types.get(i).llvmType;

		if(t.referenceCount() > 0)
			return module.getPointer(self.getLLVMTypeFor(t.dereference()));
		
		let llvmType = self.translateType(t, module);
		self._types.push(typeMapPair(t, llvmType));
		return llvmType;
	}

	private fn translateType(t: typeDescriptor, module: llvmModule) -> llvmType
	{
		if(t.isBasedOnGeneric())
		{
			let instantiationData = t.genericInstantiationInfo();
			if(instantiationData.generic() == genericTypeof(array))
			{
				let elementType = self.getLLVMTypeFor(instantiationData.parameters()[0]);
				let result = module.appendStruct(t.package().name() + t.qualifiedName());
				result.setFields(<llvmType>[module.getPointer(elementType), llvmInt32Type(self._compilationResult)]);
				return result;
			}
		}
		return module.appendStruct(t.package().name() + t.qualifiedName());
	}
}
