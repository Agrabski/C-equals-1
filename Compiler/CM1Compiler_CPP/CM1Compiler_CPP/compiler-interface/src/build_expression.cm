import {
	IExpression
	llvmValue
	variableDescriptor
	variableReferenceExpression
	fieldAccessExpression
	functionCallExpression
	adressofExpression
	literalExpression
	constructorInvocationExpression
	binaryOperatorExpression
}
from {cm1mLang::compiler::ir}

import {llvmIrBodyBuilder llvmValue llvmFunction} from {cm1mLang::compiler::backend}
import {fieldDescriptor functionDescriptor} from {cm1mLang::compiler}
import {dictionary indexof print enumerate} from {std}
import {cast null usize string bool false true} from {cm1mLang}

private fn build_expression(instruction: IExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	if(cast<variableReferenceExpression, IExpression>(instruction) != null<variableReferenceExpression>())
		return build(
			cast<variableReferenceExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<fieldAccessExpression, IExpression>(instruction) != null<fieldAccessExpression>())
		return build(
			cast<fieldAccessExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<functionCallExpression, IExpression>(instruction) != null<functionCallExpression>())
		return build(
			cast<functionCallExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<adressofExpression, IExpression>(instruction) != null<adressofExpression>())
		return build(
			cast<adressofExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<literalExpression, IExpression>(instruction) != null<literalExpression>())
		return build(
			cast<literalExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<binaryOperatorExpression, IExpression>(instruction) != null<binaryOperatorExpression>())
		return build(
			cast<binaryOperatorExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	if(cast<constructorInvocationExpression, IExpression>(instruction) != null<constructorInvocationExpression>())
		return build(
			cast<constructorInvocationExpression, IExpression>(instruction),
			builder,
			variables,
			registry,
			isLeftExpression
		);
	print<IExpression*>(instruction);
	return build(
	cast<constructorInvocationExpression, IExpression>(instruction),
	builder,
	variables,
	registry,
	isLeftExpression
);
}

private fn build(instruction: functionCallExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	let f = instruction._runtimeFunction;
	let values = <llvmValue>[];
	let arguments = instruction._arguments;
	for(i in enumerate(0, arguments.length()))
	{
		print<IExpression*>(arguments[i]);
		values.push(build_expression(
			arguments[i],
			builder,
			variables,
			registry,
			false()
		));
	}
	if(f.isNull())
	{
		print<functionCallExpression*>(instruction);
		print(instruction._compiletimeFunction.qualifiedName());
	}
	return builder.appendFunctionCall(getFunction(f, registry), &values);
}

private fn build(instruction: constructorInvocationExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	let f = instruction._runtimeConstructor;
	let values = <llvmValue>[];
	let arguments = instruction._arguments;
	let self = builder.appendAlloca(getType(instruction.type(), registry));
	values.push(self);
	for(i in enumerate(0, arguments.length()))
	{
		print<IExpression*>(arguments[i]);
		values.push(build_expression(
			arguments[i],
			builder,
			variables,
			registry,
			false()
		));
	}
	builder.appendFunctionCall(getFunction(f, registry), &values);
	if(isLeftExpression)
		return self;
	return builder.appendLoad(self);
}

private fn build(instruction: variableReferenceExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	if(instruction._variable.isFunctionParameter())
		return *(variables.get(instruction._variable));
	if(isLeftExpression)
		return *(variables.get(instruction._variable));
	return builder.appendLoad(*(variables.get(instruction._variable)));
}

private fn build(instruction: binaryOperatorExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	let f = instruction._runtimeFunction;
	let values = <llvmValue>[];
	let arg1 = build_expression(
		instruction._arg1,
		builder,
		variables,
		registry,
		false()
	);
	let arg2 = build_expression(
		instruction._arg2,
		builder,
		variables,
		registry,
		false()
	);
	if(f.parameters()[0].type().isVoidType() )
	{
		arg1 = builder.appendBitcast(arg1, getType(typeof(void).reference(), registry));
		arg2 = builder.appendBitcast(arg2, getType(typeof(void).reference(), registry));
	}
	values.push(arg1);
	values.push(arg2);
	return builder.appendFunctionCall(getFunction(f, registry), &values);
}


private fn build(instruction: literalExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	if(instruction.type() == typeof(usize))
		return builder.appendIntegerLiteral(
			*cast<usize, void>(instruction._value),
			getType(instruction.type(), registry)
		);
	print<literalExpression*>(instruction);
	return builder.appendIntegerLiteral(
	*cast<usize, void>(instruction._value),
	getType(instruction.type(), registry)
);
}

private fn build(instruction: fieldAccessExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	let field = instruction._field;
	let exp = instruction._expression;
	let val = build_expression(exp, builder, variables, registry, true());
	let typeFields = field.parent().fields();
	let address = builder.apendGetElementPointer(
		val,
		0,
		indexof<fieldDescriptor>(&typeFields, &field)
	);
	if(isLeftExpression)
		return address;
	return builder.appendLoad(address);
}

private fn build(instruction: adressofExpression*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*, isLeftExpression: bool) -> llvmValue
{
	let exp = build_expression(instruction._expression, builder, variables, registry, true());
	if(exp.referenceCount() == (instruction.type().referenceCount()) && (instruction.type().baseType() != typeof(string)))
	{
		return exp;
	}
	let add = builder.appendAlloca(getType(instruction.type().dereference(), registry));
	builder.appendStore(exp, add);
	return add;
}