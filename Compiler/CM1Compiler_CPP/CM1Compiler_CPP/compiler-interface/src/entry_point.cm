import {compilerEntryPoint packageDescriptor typeDescriptor functionDescriptor} from {cm1mLang::compiler}
import {usize string bool true false null cast} from {cm1mLang}
import {compilationResult llvmType llvmFunction llvmVoidType} from {cm1mLang::compiler::backend}
import {enumerate print dictionary list} from {std}
import {IBindingsGenerator} from {bindingGenerator}

[compilerEntryPoint()]
public fn entryPoint(packages: packageDescriptor[], result: compilationResult) {
	let registry = packageRegistry(result);
	let processedPackages = list<packageDescriptor>();
	for(i in enumerate(0, packages.length()))
		compilePackage(packages[i], &registry, result, &processedPackages);}

private fn contains(l: list<packageDescriptor>*, elem: packageDescriptor*) -> bool
{
	for(i in enumerate(0, l.length()))
		if(l.get(i).name() == elem.name())
			return true();
	return false();
}

private fn compilePackage(package: packageDescriptor, registry: packageRegistry*, cr: compilationResult, processedPackages: list<packageDescriptor>*)
{
	if(contains(processedPackages, &package))
		return;
	print(package.name());
	let deps = package.dependencies();
	for(i in enumerate(0, deps.length()))
		compilePackage(deps[i], registry, cr, processedPackages);
	let functions = package.getAllFunctions();
	for(i in enumerate(0, functions.length()))
	{
		let func = functions[i];
		if(func.runtimeExecutable())
		{
			if(ignore(func))
			{
				let name = func.name();
			}
			else
			{
				let f = getFunction(func, registry);
				let generator = func.get_attribute<IBindingsGenerator>();
				if(generator != null<IBindingsGenerator>())
					generator.generate(f.name(), func, registry);
			}
		}
	}
}

private fn ignore(func: functionDescriptor) -> bool
{
	if(func.isBasedOnGeneric())
	{
		// todo: figure out cast
		let data = func.genericInstantiationInfo();
		if(data.generic() == genericFunctionof(cast))
		{
			return true();
		}
		//for(i in enumerate(0, data.parameters()))

	}
	let params = func.parameters();
	for(i in enumerate(0, params.length()))
	{
		if(params[i].type().excludedAtRuntime())
			return true();
	}
	if(func.returnType().isVoidType())
		return false();
	if(func.isAbstract() || (func.returnType().excludedAtRuntime()))
		return true();
	return false();
}

private fn getType(t: typeDescriptor, registry: packageRegistry*) -> llvmType
{
	if(t.isVoidType() && (t.referenceCount() == 0))
		return llvmVoidType(registry._compilationResult);
	let found = registry.findExistingType(t);
	if(found != null<llvmType>())
		return *found;
	if(t.excludedAtRuntime())
		return;
	let lt = registry.getLLVMTypeFor(t);
	return lt;
}

private fn completeType(t: typeDescriptor, lType: llvmType, registry: packageRegistry*)
{
	if(t.isBasedOnGeneric())
	{
		let instantiationData = t.genericInstantiationInfo();
		if(instantiationData.generic() == genericTypeof(array))
			return;
	}
	if(t != typeof(usize) && (t != typeof(string)) && (t.referenceCount() == 0))
	{
		let fields = t.fields();
		let types = <llvmType>[];
		for(i in enumerate(0, fields.length()))
		{
			let field = fields[i];
			types.push(getType(field.type(), registry));
		}
		lType.setFields(types);
	}
}
