import {
	IInstruction
	variableDeclarationStatement
	variableDescriptor
	returnStatement
	assigmentStatement
	functionCallStatement
	ifStatement
	whileStatement
}
from {cm1mLang::compiler::ir}
import {fieldDescriptor functionDescriptor} from {cm1mLang::compiler}
import {llvmIrBodyBuilder llvmValue llvmFunction} from {cm1mLang::compiler::backend}
import {dictionary print enumerate} from {std}
import {cast null dictionary false true} from {cm1mLang}

private fn build_block(code: IInstruction[*]*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	for(i in enumerate(0, code.length()))
		build_instruction((code[i]), builder, variables, registry);
}


private fn build_instruction(instruction: IInstruction*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	if(cast<variableDeclarationStatement, IInstruction>(instruction) != null<variableDeclarationStatement>())
		build(
			cast<variableDeclarationStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);
	if(cast<assigmentStatement, IInstruction>(instruction) != null<assigmentStatement>())
		build(
			cast<assigmentStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);
	
	if(cast<returnStatement, IInstruction>(instruction) != null<returnStatement>())
		build(
			cast<returnStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);

	if(cast<functionCallStatement, IInstruction>(instruction) != null<functionCallStatement>())
		build(
			cast<functionCallStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);

	if(cast<ifStatement, IInstruction>(instruction) != null<ifStatement>())
		build(
			cast<ifStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);

	if(cast<whileStatement, IInstruction>(instruction) != null<whileStatement>())
		build(
			cast<whileStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);
}

private fn build(instruction: variableDeclarationStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let var = instruction._variable;
	let pointer = builder.appendAlloca(
		getType(var.type(), registry),
		var.name()
	);
	variables.push(var, pointer);

	if(instruction._expression != null<IExpression>())
	{
		let value = build_expression(
		instruction._expression,
		builder,
		variables,
		registry,
		false()
		);
		builder.appendStore(value, pointer);
	}
}

private fn build(instruction: returnStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let exp = instruction._expression;
	if(exp != null<IExpression>())
		builder.appendRet(build_expression(
			exp,
			builder,
			variables,
			registry,
			false()
		));
	else
		builder.appendRetVoid();
}

private fn build(instruction: assigmentStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let lExp = instruction._lExpression;
	let rExp = instruction._rExpression;
	let lValue = build_expression(
		lExp,
		builder,
		variables,
		registry,
		true()
	);
	let rValue = build_expression(
		rExp,
		builder,
		variables,
		registry,
		false()
	);
	builder.appendStore(rValue, lValue);
}

private fn build(instruction: functionCallStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let exp = instruction._function;
	build_expression(
			exp,
			builder,
			variables,
			registry,
			false()
		);
}

private fn build(instruction: ifStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let exp = instruction._expression;
	let condition = build_expression(
		exp,
		builder,
		variables,
		registry,
		false()
	);
	let ifBranchBuilder = builder.appendBlock("if");
	let elseBranchBuilder = builder.appendBlock("else");
	builder.appendBranch(ifBranchBuilder, elseBranchBuilder, condition);
	builder.switchToNewBlock();
	build_block(&(instruction._ifBranch), &ifBranchBuilder, variables, registry);
	build_block(&(instruction._elseBranch), &ifBranchBuilder, variables, registry);
	ifBranchBuilder.appendBranch(*builder);
	elseBranchBuilder.appendBranch(*builder);
}

private fn build(instruction: whileStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let loopEntry = builder.appendBlock("loop_entry_point");
	let condition = build_expression(
		instruction._expression,
		&loopEntry,
		variables,
		registry,
		false()
	);
	let loopBody = builder.appendBlock("loop_body");
	let afterLoop = builder.appendBlock("after_loop");

	builder.appendBranch(loopEntry);
	loopEntry.appendBranch(loopBody, afterLoop, condition);
	builder.switchToNewBlock();
	afterLoop.appendBranch(*builder);

	build_block(&(instruction._body), &loopBody, variables, registry);
	loopBody.appendBranch(loopEntry);
}
