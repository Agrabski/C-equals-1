import {
	IInstruction
	variableDeclarationStatement
	variableDescriptor
}
from {cm1mLang::compiler::ir}
import {fieldDescriptor functionDescriptor} from {cm1mLang::compiler}
import {llvmIrBodyBuilder llvmValue llvmFunction} from {cm1mLang::compiler::backend}
import {dictionary print} from {std}
import {cast null dictionary false} from {cm1mLang}

private fn build_instruction(instruction: IInstruction*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	if(cast<variableDeclarationStatement, IInstruction>(instruction) != null<variableDeclarationStatement>())
		build(
			cast<variableDeclarationStatement, IInstruction>(instruction),
			builder,
			variables,
			registry
		);
}

private fn build(instruction: variableDeclarationStatement*, builder: llvmIrBodyBuilder*, variables: dictionary<variableDescriptor, llvmValue>*, registry: packageRegistry*)
{
	let var = instruction._variable;
	print<IExpression*>(instruction._expression);
	let value = build_expression(
		instruction._expression,
		builder,
		variables,
		registry,
		false()
	);
	let pointer = builder.appendAlloca(
		getType(var.type(), registry),
		var.name()
	);
	variables.push(var, pointer);

	builder.appendStore(value, pointer);

}
