import {functionDescriptor packageDescriptor typeDescriptor} from {cm1mLang::compiler}
import {llvmFunction llvmModule llvmType compilationResult llvmValue} from {cm1mLang::compiler::backend}
import {enumerate print dictionary} from {std}
import {ReplaceWithLLVMIR} from {std::compiler}
import {variableDescriptor} from {cm1mLang::compiler::ir}
import {string null dictionary usize bool} from {cm1mLang}

private fn getFileWrite(f: functionDescriptor, registry: packageRegistry*) -> llvmFunction
{
	let mod = registry.getModuleFor(f);
	let func = mod.appendFunction(
			"fprintf",
			getParameterTypes(f, registry),
			getParameterNames(f, registry),
			getType(f.returnType(), registry)
			);
	return func;
}

private fn getFileOpen(f: functionDescriptor, registry: packageRegistry*) -> llvmFunction
{
	let mod = registry.getModuleFor(f);
	let func = mod.appendFunction(
			"fopen",
			getParameterTypes(f, registry),
			getParameterNames(f, registry),
			getType(f.returnType(), registry)
			);
	return func;
}
