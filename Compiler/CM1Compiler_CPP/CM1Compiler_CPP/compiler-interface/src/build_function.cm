import {functionDescriptor packageDescriptor typeDescriptor} from {cm1mLang::compiler}
import {llvmFunction llvmModule llvmType compilationResult llvmValue} from {cm1mLang::compiler::backend}
import {enumerate print dictionary} from {std}
import {ReplaceWithLLVMIR mapToExternalSymbol} from {std::compiler}
import {variableDescriptor} from {cm1mLang::compiler::ir}
import {string null dictionary bool} from {cm1mLang}

private fn getFunction(f: functionDescriptor, registry: packageRegistry*) -> llvmFunction
{
	if(registry._functions.hasKey(f))
		return *registry._functions.get(f);

	let attribute = f.get_attribute<_att_ ReplaceWithLLVMIR>();
	let external = f.get_attribute<_att_ mapToExternalSymbol>();
	print(f.name());
	print<_att_ mapToExternalSymbol*>(external);
	if(external != null<_att_ mapToExternalSymbol>())
	{
		let g = createFunctionFromExternal(f, registry, external);
		registry._functions.push(f, g);
		return g;
	}
	if(attribute != null<_att_ ReplaceWithLLVMIR>())
	{
		let g = createFunctionFromLLVMIR(f, registry._compilationResult, attribute);
		registry._functions.push(f, g);
		return g;
	}
	else
	{
		if(f.isIntrinsic())
		{
			if(f.qualifiedName() == "::string::length")
			{
				let r = getStringLength(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.name() == "length") //todo: this is about arrays
			{
				let r = getArrayLength(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::true")
			{
				let r = getTrue(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::false")
			{
				let r = getFalse(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_==")
			{
				let r = getSimpleComparisonOperator(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_!=")
			{
				let r = getSimpleNotEqualsOperator(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_>")
			{
				let r = getSimpleGreaterOperator(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_<")
			{
				let r = getSimpleLessOperator(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_*")
			{
				let r = getIntegerMultiplication(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_+")
			{
				let r = getIntegerAddition(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_-")
			{
				let r = getIntegerDifference(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.qualifiedName() == "::operator_/")
			{
				let r = getIntegerDivision(f, registry);
				registry._functions.push(f, r);
				return r;
			}
			if(f.name() == "operator_[]")
			{
				if(f.parameters()[0].type().dereference() == typeof(string))
				{
					let r = getStringIndexingOperator(f, registry);
					registry._functions.push(f, r);
					return r;
				}
				let r = getIndexingOperator(f, registry);
				registry._functions.push(f, r);
				return r;
			}
		}
		if(f.isBasedOnGeneric())
		{
			if(f.genericInstantiationInfo().generic() == genericFunctionof(null))
			{
				let n = getNull(f, registry);
				registry._functions.push(f, n);
				return n;
			}

		}
		let mod = registry.getModuleFor(f);
		let func = mod.appendFunction(
			getFunctionName(f),
			getParameterTypes(f, registry),
			getParameterNames(f, registry),
			getType(f.returnType(), registry)
			);
		registry._functions.push(f, func);
		buildFunction(f, func, registry, mod);
		
		return func;
	}
}

private fn createFunctionFromExternal(f: functionDescriptor, registry: packageRegistry*, attribute: _att_ mapToExternalSymbol*) -> llvmFunction
{
	print("external");
	let mod = registry.getModuleFor(f);
	let f = mod.appendFunction(
		attribute._symbolName,
		getParameterTypes(f, registry),
		getParameterNames(f, registry),
		getType(f.returnType(), registry)
	);
	return f;
}


private fn createFunctionFromLLVMIR(f: functionDescriptor, cr: compilationResult, attribute: _att_ ReplaceWithLLVMIR*) -> llvmFunction
{
	let mod = cr.loadModuleFromString(attribute.overridenLLVMIR);
	return mod.functions()[0];
}

private fn buildFunction(f: functionDescriptor, llvmF: llvmFunction, registry: packageRegistry*, mod: llvmModule)
{
	let variables = dictionary<variableDescriptor, llvmValue>();
	let params = f.parameters();
	for(i in enumerate(0, params.length()))
		variables.push(params[i], llvmF.getParameter(i));
	let builder = llvmF.getBuilder();
	let code = f.code();
	build_block(&code, &builder, &variables, registry);
}

private fn getParameterTypes(f: functionDescriptor, registry: packageRegistry*) -> llvmType[]
{
	let result = <llvmType>[];
	let parameters = f.parameters();
	for(i in enumerate(0, parameters.length()))
		result.push(getType(parameters[i].type(), registry));
	return result;
}

private fn getParameterNames(f: functionDescriptor, registry: packageRegistry*) -> string[]
{
	let result = <string>[];
	let parameters = f.parameters();
	for(i in enumerate(0, parameters.length()))
	{
		result.push(parameters[i].name());
	}
	return result;
}

private fn getFunctionName(f: functionDescriptor) -> string {
	let baseName = f.qualifiedName();
	let params = f.parameters();
	for(i in enumerate(0, params.length()))
	{
		baseName = baseName + "__" + (params[i].type().toString());
	}
	return baseName
		.replace(":", "_")
		.replace("_<", "less")
		.replace("_>", "greater")
		.replace("<", "_")
		.replace(">", "_")
		.replace("[", "__left_bracket__")
		.replace("]", "__right_bracket__")
		.replace("+", "__plus__")
		.replace("-", "__minus__")
		.replace("*", "__star__")
		.replace("/", "__slash__")
		.replace("==", "__equals__")
		.replace("!=", "__not_equals__")
		.replace(",", "__comma__")
		.replace("@", "__at__");
}

