import {functionDescriptor packageDescriptor typeDescriptor} from {cm1mLang::compiler}
import {llvmFunction llvmModule llvmType llvmVoidType compilationResult llvmValue} from {cm1mLang::compiler::backend}
import {enumerate print dictionary} from {std}
import {ReplaceWithLLVMIR} from {std::compiler}
import {variableDescriptor} from {cm1mLang::compiler::ir}
import {string null dictionary} from {cm1mLang}

private fn createFunction(f: functionDescriptor, package: packageDescriptor, registry: packageRegistry*, mod: llvmModule, cr: compilationResult) -> llvmFunction
{
	print(f.qualifiedName());
	let attribute = f.get_attribute<_att_ ReplaceWithLLVMIR>();

	if(attribute != null<_att_ ReplaceWithLLVMIR>())
		return createFunctionFromLLVMIR(f, cr, attribute);
	else
	{
		let returnType = llvmVoidType(cr);
		if(f.returnType().isVoidType())
			let x = 1;
		else
			returnType = registry.getLLVMTypeForExisting(f.returnType());
		let func = mod.appendFunction(
			f.name(),
			getParameterTypes(f, registry),
			getParameterNames(f, registry),
			returnType
			);
		return func;
	}
}

private fn getFunction(f: functionDescriptor, registry: packageRegistry*) -> llvmFunction {

	if(registry._functions.hasKey(f))
		return *registry._functions.get(f);


	let attribute = f.get_attribute<_att_ ReplaceWithLLVMIR>();

	if(attribute != null<_att_ ReplaceWithLLVMIR>())
		return createFunctionFromLLVMIR(f, cr, attribute);
	else
	{
		let returnType = llvmVoidType(cr);
		if(f.returnType().isVoidType())
			let x = 1;
		else
			returnType = registry.getLLVMTypeForExisting(f.returnType());
		let func = mod.appendFunction(
			f.name(),
			getParameterTypes(f, registry),
			getParameterNames(f, registry),
			returnType
			);
		return func;
	}
}

private fn createFunctionFromLLVMIR(f: functionDescriptor, cr: compilationResult, attribute: _att_ ReplaceWithLLVMIR*) -> llvmFunction
{
	let mod = cr.loadModuleFromString(attribute.overridenLLVMIR);
}

private fn buildFunction(f: functionDescriptor, llvmF: llvmFunction, package: packageDescriptor, registry: packageRegistry*, mod: llvmModule, functionMap: dictionary<functionDescriptor, llvmFunction>*)
{
	let variables = dictionary<variableDescriptor, llvmValue>();
	let params = f.parameters();
	for(i in enumerate(0, params.length()))
		variables.push(params[i], llvmF.getParameter(i));
	let builder = llvmF.getBuilder();
	let code = f.code();
	for(i in enumerate(0, code.length()))
		build_instruction(code[i], &builder, &variables, registry, functionMap);
	
}

private fn getParameterTypes(f: functionDescriptor, registry: packageRegistry*) -> llvmType[]
{
	let result = <llvmType>[];
	let parameters = f.parameters();
	for(i in enumerate(0, parameters.length()))
		result.push(registry.getLLVMTypeForExisting(parameters[i].type()));
	return result;
}

private fn getParameterNames(f: functionDescriptor, registry: packageRegistry*) -> string[]
{
	let result = <string>[];
	let parameters = f.parameters();
	for(i in enumerate(0, parameters.length()))
	{
		result.push(parameters[i].name());
	}
	return result;
}

